// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sistema.Bico.Infra.Context;

#nullable disable

namespace Sistema.Bico.Infra.Migrations
{
    [DbContext(typeof(ContextBase))]
    [Migration("20230313143400_2")]
    partial class _2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bairro")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Complemento")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Logradouro")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK_TB_Address");

                    b.ToTable("TB_Address", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Cancellation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CpfCnpj")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsServiceProvider")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<byte[]>("PerfilPicture")
                        .HasColumnType("bytea");

                    b.Property<int>("TypePeople")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("PK_TB_Client");

                    b.ToTable("TB_Client", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Codigo")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("PK_TB_ProfessionalArea");

                    b.ToTable("TB_ProfessionalArea", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ProfessionalProfileId")
                        .HasColumnType("uuid");

                    b.Property<int>("StatusWorker")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("PK_TB_ProfessionalClient");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProfessionalProfileId");

                    b.ToTable("TB_ProfessionalClient", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalEspeciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("IdProfessionalProfile")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("PK_TB_ProfessionalEspeciality");

                    b.HasIndex("IdProfessionalProfile");

                    b.ToTable("TB_ProfessionalEspeciality", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<long?>("PagamentoId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("uuid");

                    b.Property<int>("StatusPayment")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id")
                        .HasName("PK_TB_ProfessionalPayment");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("TB_ProfessionalPayment", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Avaliation")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Perfil")
                        .HasColumnType("text");

                    b.Property<byte[]>("PerfilPicture")
                        .HasColumnType("bytea");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<bool>("Premium")
                        .HasColumnType("boolean");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfessionalAreaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("PK_TB_ProfessionalProfile");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProfessionalAreaId");

                    b.ToTable("TB_ProfessionalProfile", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("TypeTemplate")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("PK_TB_Template");

                    b.ToTable("TB_Template", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.TermUse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("TypeTerm")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_TB_TermUse");

                    b.ToTable("TB_TermUse", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ThreeAvaliation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Communication")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Deadline")
                        .HasColumnType("numeric");

                    b.Property<int>("NumberAvaliation")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProfessionalProfileId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quality")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("PK_TB_ThreeAvaliation");

                    b.HasIndex("ProfessionalProfileId");

                    b.ToTable("TB_ThreeAvaliation", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.Worker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsConcluded")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfessionalAreaId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProfessionalProfileConcludedId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("PK_TB_Worker");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProfessionalAreaId");

                    b.HasIndex("ProfessionalProfileConcludedId");

                    b.ToTable("TB_Worker", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.WorkerDone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Avaliation")
                        .HasColumnType("numeric");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("WorkerDoneProfessionalId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_TB_WorkerDone");

                    b.HasIndex("WorkerDoneProfessionalId");

                    b.ToTable("TB_WorkerDone", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.WorkerDoneProfessional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ProfessionalProfileId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("PK_TB_WorkerDoneProfessional");

                    b.HasIndex("ProfessionalProfileId");

                    b.ToTable("TB_WorkerDoneProfessional", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.WorkerProfessional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsConcluded")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ProfessionalProfileId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WorkerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_TB_WorkerProfessional");

                    b.HasIndex("ProfessionalProfileId");

                    b.HasIndex("WorkerId");

                    b.ToTable("TB_WorkerProfessional", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Generics.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id")
                        .HasName("PK_TB_AspNetUsers");

                    b.HasIndex("ClientId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Generics.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Generics.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sistema.Bico.Domain.Generics.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Generics.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalClient", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.Client", "Client")
                        .WithMany("ProfessionalClient")
                        .HasForeignKey("ClientId");

                    b.HasOne("Sistema.Bico.Domain.Entities.ProfessionalProfile", "ProfessionalProfile")
                        .WithMany("ProfessionalClient")
                        .HasForeignKey("ProfessionalProfileId");

                    b.Navigation("Client");

                    b.Navigation("ProfessionalProfile");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalEspeciality", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.ProfessionalProfile", "ProfessionalProfile")
                        .WithMany("Especiality")
                        .HasForeignKey("IdProfessionalProfile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfessionalProfile");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalPayment", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.ProfessionalProfile", "Professional")
                        .WithMany()
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalProfile", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Sistema.Bico.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sistema.Bico.Domain.Entities.ProfessionalArea", "ProfessionalArea")
                        .WithMany()
                        .HasForeignKey("ProfessionalAreaId");

                    b.Navigation("Address");

                    b.Navigation("Client");

                    b.Navigation("ProfessionalArea");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ThreeAvaliation", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.ProfessionalProfile", "ProfessionalProfile")
                        .WithMany()
                        .HasForeignKey("ProfessionalProfileId");

                    b.Navigation("ProfessionalProfile");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.Worker", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Sistema.Bico.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sistema.Bico.Domain.Entities.ProfessionalArea", "ProfessionalArea")
                        .WithMany()
                        .HasForeignKey("ProfessionalAreaId");

                    b.HasOne("Sistema.Bico.Domain.Entities.ProfessionalProfile", "ProfessionalProfileConcluded")
                        .WithMany()
                        .HasForeignKey("ProfessionalProfileConcludedId");

                    b.Navigation("Address");

                    b.Navigation("Client");

                    b.Navigation("ProfessionalArea");

                    b.Navigation("ProfessionalProfileConcluded");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.WorkerDone", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.WorkerDoneProfessional", "WorkerDoneProfessional")
                        .WithMany("WorkerDone")
                        .HasForeignKey("WorkerDoneProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkerDoneProfessional");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.WorkerDoneProfessional", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.ProfessionalProfile", "ProfessionalProfile")
                        .WithMany("WorkerDoneProfessional")
                        .HasForeignKey("ProfessionalProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfessionalProfile");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.WorkerProfessional", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.ProfessionalProfile", "ProfessionalProfile")
                        .WithMany("WorkerProfessional")
                        .HasForeignKey("ProfessionalProfileId");

                    b.HasOne("Sistema.Bico.Domain.Entities.Worker", "Worker")
                        .WithMany("WorkerProfessional")
                        .HasForeignKey("WorkerId");

                    b.Navigation("ProfessionalProfile");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Generics.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.Client", "Client")
                        .WithMany("ApplicationUser")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.Client", b =>
                {
                    b.Navigation("ApplicationUser");

                    b.Navigation("ProfessionalClient");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalProfile", b =>
                {
                    b.Navigation("Especiality");

                    b.Navigation("ProfessionalClient");

                    b.Navigation("WorkerDoneProfessional");

                    b.Navigation("WorkerProfessional");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.Worker", b =>
                {
                    b.Navigation("WorkerProfessional");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.WorkerDoneProfessional", b =>
                {
                    b.Navigation("WorkerDone");
                });
#pragma warning restore 612, 618
        }
    }
}
