// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sistema.Bico.Infra.Context;

#nullable disable

namespace Sistema.Bico.Infra.Migrations
{
    [DbContext(typeof(ContextBase))]
    [Migration("20230309231024_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bairro")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Complemento")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Logradouro")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK_TB_Address");

                    b.ToTable("TB_Address", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Cancellation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CpfCnpj")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsServiceProvider")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<byte[]>("PerfilPicture")
                        .HasColumnType("bytea");

                    b.Property<int>("TypePeople")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("PK_TB_Client");

                    b.ToTable("TB_Client", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Codigo")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("PK_TB_ProfessionalArea");

                    b.ToTable("TB_ProfessionalArea", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bde41330-9098-4ccc-9461-4f93c7f7a5d9"),
                            Codigo = 1,
                            Created = new DateTime(2023, 3, 9, 20, 10, 24, 194, DateTimeKind.Local).AddTicks(661),
                            Description = "Assistência Técnica"
                        },
                        new
                        {
                            Id = new Guid("b2baeafe-79bc-442f-87fc-3ddd5009451c"),
                            Codigo = 2,
                            Created = new DateTime(2023, 3, 9, 20, 10, 24, 194, DateTimeKind.Local).AddTicks(712),
                            Description = "Aulas"
                        },
                        new
                        {
                            Id = new Guid("e38dcbe0-c263-4c25-aa4f-4e2375c66ba5"),
                            Codigo = 3,
                            Created = new DateTime(2023, 3, 9, 20, 10, 24, 194, DateTimeKind.Local).AddTicks(715),
                            Description = "Autos"
                        },
                        new
                        {
                            Id = new Guid("30ef9462-0718-4fdf-82cf-068d5cd184a6"),
                            Codigo = 4,
                            Created = new DateTime(2023, 3, 9, 20, 10, 24, 194, DateTimeKind.Local).AddTicks(717),
                            Description = "Consultoria"
                        },
                        new
                        {
                            Id = new Guid("2dd03559-9dba-4ed2-822c-e90d5dd0e86c"),
                            Codigo = 5,
                            Created = new DateTime(2023, 3, 9, 20, 10, 24, 194, DateTimeKind.Local).AddTicks(718),
                            Description = "Design/Tecnologia"
                        },
                        new
                        {
                            Id = new Guid("2f6272bd-d0e2-49b8-b329-636498994c11"),
                            Codigo = 6,
                            Created = new DateTime(2023, 3, 9, 20, 10, 24, 194, DateTimeKind.Local).AddTicks(720),
                            Description = "Eventos"
                        },
                        new
                        {
                            Id = new Guid("1573fc16-fa86-4278-b5b3-d0fa36a1da26"),
                            Codigo = 7,
                            Created = new DateTime(2023, 3, 9, 20, 10, 24, 194, DateTimeKind.Local).AddTicks(746),
                            Description = "Moda e Beleza"
                        },
                        new
                        {
                            Id = new Guid("88d451d3-74ef-470e-ae0f-3f50d8a8b6b5"),
                            Codigo = 8,
                            Created = new DateTime(2023, 3, 9, 20, 10, 24, 194, DateTimeKind.Local).AddTicks(748),
                            Description = "Reformas e Reparos"
                        },
                        new
                        {
                            Id = new Guid("ae15bca4-f396-4271-b401-62184512bab3"),
                            Codigo = 9,
                            Created = new DateTime(2023, 3, 9, 20, 10, 24, 194, DateTimeKind.Local).AddTicks(750),
                            Description = "Saúde"
                        },
                        new
                        {
                            Id = new Guid("d158dafa-9f1f-41fb-a7a3-c67ae966fd4c"),
                            Codigo = 10,
                            Created = new DateTime(2023, 3, 9, 20, 10, 24, 194, DateTimeKind.Local).AddTicks(751),
                            Description = "Serviços Domésticos"
                        });
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ProfessionalProfileId")
                        .HasColumnType("uuid");

                    b.Property<int>("StatusWorker")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("PK_TB_ProfessionalClient");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProfessionalProfileId");

                    b.ToTable("TB_ProfessionalClient", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalEspeciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("IdProfessionalProfile")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdWorker")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("PK_TB_ProfessionalEspeciality");

                    b.HasIndex("IdProfessionalProfile");

                    b.HasIndex("IdWorker");

                    b.ToTable("TB_ProfessionalEspeciality", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<long?>("PagamentoId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("uuid");

                    b.Property<int>("StatusPayment")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id")
                        .HasName("PK_TB_ProfessionalPayment");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("TB_ProfessionalPayment", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Avaliation")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Perfil")
                        .HasColumnType("text");

                    b.Property<byte[]>("PerfilPicture")
                        .HasColumnType("bytea");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<bool>("Premium")
                        .HasColumnType("boolean");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfessionalAreaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("PK_TB_ProfessionalProfile");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProfessionalAreaId");

                    b.ToTable("TB_ProfessionalProfile", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("TypeTemplate")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("PK_TB_Template");

                    b.ToTable("TB_Template", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c51f5b4-8138-48de-8a11-d264664898c6"),
                            Created = new DateTime(2023, 3, 9, 20, 10, 24, 196, DateTimeKind.Local).AddTicks(4557),
                            Description = "",
                            TypeTemplate = 1
                        });
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.TermUse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("TypeTerm")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_TB_TermUse");

                    b.ToTable("TB_TermUse", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab04e16e-2740-49ce-837b-f5331d2020d5"),
                            Active = true,
                            Created = new DateTime(2023, 3, 9, 20, 10, 24, 195, DateTimeKind.Local).AddTicks(3002),
                            Description = "<h3>TERMO DE USO</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4>1. Quais informa&ccedil;&otilde;es est&atilde;o presentes neste documento?</h4>\r\n\r\n<p>Neste Termo de Uso, o usu&aacute;rio do servi&ccedil;o do Di&aacute;rio Oficial da Uni&atilde;o (DOU) disponibilizado pelo aplicativo mobile encontrar&aacute; informa&ccedil;&otilde;es sobre: o funcionamento do servi&ccedil;o e as regras aplic&aacute;veis a ele; o arcabou&ccedil;o legal relacionado &agrave; presta&ccedil;&atilde;o do servi&ccedil;o; as responsabilidades do usu&aacute;rio ao utilizar o servi&ccedil;o; as responsabilidades da Imprensa Nacional ao prover o servi&ccedil;o; informa&ccedil;&otilde;es para contato, caso exista alguma d&uacute;vida ou seja necess&aacute;rio atualizar informa&ccedil;&otilde;es; e o foro respons&aacute;vel por eventuais reclama&ccedil;&otilde;es caso quest&otilde;es deste Termo de Uso tenham sido violadas.</p>\r\n\r\n<h4>2. Aceita&ccedil;&atilde;o do Termo de Uso e Pol&iacute;tica de Privacidade</h4>\r\n\r\n<p>Ao utilizar os servi&ccedil;os, o usu&aacute;rio confirma que leu e compreendeu os Termos e Pol&iacute;ticas aplic&aacute;veis ao servi&ccedil;o Di&aacute;rio Oficial da Uni&atilde;o (DOU) disponibilizado pelo aplicativo mobile e concorda em ficar vinculado a eles.</p>\r\n\r\n<h4>3. Defini&ccedil;&otilde;es</h4>\r\n\r\n<p>Para melhor compreens&atilde;o deste documento, neste Termo de Uso e Pol&iacute;tica de Privacidade, consideram-se:</p>\r\n\r\n<p><strong>Internet:</strong>&nbsp;o sistema constitu&iacute;do do conjunto de protocolos l&oacute;gicos, estruturado em escala mundial para uso p&uacute;blico e irrestrito, com a finalidade de possibilitar a comunica&ccedil;&atilde;o de dados entre terminais por meio de diferentes redes.</p>\r\n\r\n<p><strong>S&iacute;tios e aplicativos:</strong>&nbsp;s&iacute;tios e aplicativos por meio dos quais o usu&aacute;rio acessa os servi&ccedil;os e conte&uacute;dos disponibilizados.</p>\r\n\r\n<p><strong>Usu&aacute;rios (ou &quot;Usu&aacute;rio&quot;, quando individualmente considerado):</strong>&nbsp;todas as pessoas naturais que utilizarem o servi&ccedil;o Di&aacute;rio Oficial da Uni&atilde;o (DOU).</p>\r\n\r\n<p><strong>Leitura em texto:</strong>&nbsp;modo de consulta ao conte&uacute;do do DOU que permite acesso individualizado aos atos publicados, em formato html.</p>\r\n\r\n<p><strong>Vers&atilde;o Certificada:</strong>&nbsp;modo de consulta ao conte&uacute;do do DOU que permite acesso &agrave; p&aacute;gina da edi&ccedil;&atilde;o contendo o ato pesquisado, certificada digitalmente, em formato pdf.</p>\r\n\r\n<h4>4. Quais s&atilde;o as leis e normativos aplic&aacute;veis a esse servi&ccedil;o?</h4>\r\n\r\n<p>- Decreto n&ordm; 8.777, de 11 de maio de 2016: Institui a Pol&iacute;tica de Dados Abertos do Poder Executivo federal.</p>\r\n\r\n<p>- Decreto n&ordm; 9.215, de 29 de novembro de 2017: Disp&otilde;e sobre a publica&ccedil;&atilde;o do Di&aacute;rio Oficial da Uni&atilde;o.</p>\r\n\r\n<p>- Portaria IN/SG/PR n&ordm; 9, de 4 de fevereiro de 2021: Disp&otilde;e sobre publica&ccedil;&atilde;o de atos no Di&aacute;rio Oficial da Uni&atilde;o.</p>\r\n\r\n<h4>5. Descri&ccedil;&atilde;o do servi&ccedil;o</h4>\r\n\r\n<p>Com o objetivo facilitar o acesso imediato aos atos oficiais publicados no Di&aacute;rio Oficial da Uni&atilde;o (DOU), a Imprensa Nacional da Secretaria-Geral da Presid&ecirc;ncia da Rep&uacute;blica disponibiliza gratuitamente o aplicativo DOU, que permite acesso ao conte&uacute;do da edi&ccedil;&atilde;o do dia, busca por edi&ccedil;&otilde;es passadas e ainda: filtros de leitura por &oacute;rg&atilde;o e/ou tipo de ato; sele&ccedil;&atilde;o</p>\r\n\r\n<p>de leitura preferencial di&aacute;ria; possibilidade de &ldquo;favoritar&rdquo;, salvar no dispositivo e compartilhar as mat&eacute;rias; e baixar a vers&atilde;o em pdf.</p>\r\n\r\n<h4>6. Quais s&atilde;o as obriga&ccedil;&otilde;es dos usu&aacute;rios que utilizam o servi&ccedil;o?</h4>\r\n\r\n<p>O Usu&aacute;rio &eacute; respons&aacute;vel pela repara&ccedil;&atilde;o de todos e quaisquer danos, diretos ou indiretos (inclusive decorrentes de viola&ccedil;&atilde;o de quaisquer direitos de outros usu&aacute;rios, de terceiros, inclusive direitos de propriedade intelectual, de sigilo e de personalidade), que sejam causados &agrave; Imprensa Nacional, a qualquer outro Usu&aacute;rio, ou, ainda, a qualquer terceiro, inclusive em virtude do descumprimento do disposto nestes Termos de Uso e Pol&iacute;tica de Privacidade ou de qualquer ato praticado a partir da utiliza&ccedil;&atilde;o do servi&ccedil;o.</p>\r\n\r\n<p>A Imprensa Nacional n&atilde;o poder&aacute; ser responsabilizada pelos seguintes fatos:</p>\r\n\r\n<p>a. Equipamento infectado ou invadido por atacantes;</p>\r\n\r\n<p>b. Equipamento avariado no momento do consumo de servi&ccedil;os;</p>\r\n\r\n<p>c. Prote&ccedil;&atilde;o do equipamento;</p>\r\n\r\n<p>d. Prote&ccedil;&atilde;o das informa&ccedil;&otilde;es baseadas nos equipamentos dos usu&aacute;rios; e. Abuso de uso dos equipamentos dos usu&aacute;rios;</p>\r\n\r\n<p>f. Monitora&ccedil;&atilde;o clandestina do equipamento dos usu&aacute;rios;</p>\r\n\r\n<p>g. Vulnerabilidades ou instabilidades existentes nos sistemas dos usu&aacute;rios;</p>\r\n\r\n<p>O uso comercial das express&otilde;es utilizadas em aplicativos como marca, nome empresarial ou nome de dom&iacute;nio, al&eacute;m dos conte&uacute;dos do servi&ccedil;o, assim como os programas, bancos de dados, redes e arquivos est&atilde;o protegidos pelas leis e tratados internacionais de direito autoral, marcas, patentes, modelos e desenhos industriais.</p>\r\n\r\n<p>Ao acessar o aplicativo, os usu&aacute;rios declaram que ir&atilde;o respeitar todos os direitos de propriedade intelectual e os decorrentes da prote&ccedil;&atilde;o de marcas, patentes e/ou desenhos industriais, depositados ou registrados em, bem como todos os direitos referentes a terceiros que porventura estejam, ou estiverem de alguma forma, dispon&iacute;veis no servi&ccedil;o. O simples acesso ao servi&ccedil;o n&atilde;o confere aos usu&aacute;rios qualquer direito ao uso dos nomes, t&iacute;tulos, palavras, frases, marcas, patentes, imagens, dados e informa&ccedil;&otilde;es, dentre outras, que nele estejam ou estiverem dispon&iacute;veis.</p>\r\n\r\n<p>A reprodu&ccedil;&atilde;o de conte&uacute;do descritos anteriormente est&aacute; proibida, salvo com pr&eacute;via autoriza&ccedil;&atilde;o por escrito ou caso se destinem ao uso exclusivamente pessoal e sem que em nenhuma circunst&acirc;ncia os usu&aacute;rios adquiram qualquer direito sobre esses conte&uacute;dos.</p>\r\n\r\n<p>&Eacute; vedada a utiliza&ccedil;&atilde;o do servi&ccedil;o para finalidades comerciais, publicit&aacute;rias ou qualquer outra que contrarie a finalidade para a qual foi concebido, conforme definido neste documento, sob pena de sujei&ccedil;&atilde;o &agrave;s san&ccedil;&otilde;es cab&iacute;veis na Lei n&ordm; 9.610/1998, que protege os direitos autorais no Brasil.</p>\r\n\r\n<p>Os visitantes e usu&aacute;rios assumem toda e qualquer responsabilidade, de car&aacute;ter civil e/ou criminal, pela utiliza&ccedil;&atilde;o indevida das informa&ccedil;&otilde;es, textos, gr&aacute;ficos, marcas, imagens, enfim, todo e qualquer direito de propriedade intelectual ou industrial do servi&ccedil;o.</p>\r\n\r\n<p>Em nenhuma hip&oacute;tese, a Imprensa Nacional ser&aacute; respons&aacute;vel pela instala&ccedil;&atilde;o no equipamento do Usu&aacute;rio ou de terceiros, de c&oacute;digos maliciosos (v&iacute;rus, trojans, malware, worm, bot, backdoor, spyware, rootkit, ou de quaisquer outros que venham a ser criados), em decorr&ecirc;ncia da navega&ccedil;&atilde;o na Internet pelo usu&aacute;rio.</p>\r\n\r\n<h4>7. Quais s&atilde;o as responsabilidades da Imprensa Nacional?</h4>\r\n\r\n<p>Publicar e informar ao Usu&aacute;rio as futuras altera&ccedil;&otilde;es a estes Termos de Uso e Pol&iacute;tica de Privacidade conforme o princ&iacute;pio da publicidade estabelecido no artigo 37, caput, da Constitui&ccedil;&atilde;o Federal.</p>\r\n\r\n<p>Em nenhuma hip&oacute;tese, a Imprensa Nacional ser&aacute; respons&aacute;vel pela instala&ccedil;&atilde;o no equipamento do Usu&aacute;rio ou de terceiros, de c&oacute;digos maliciosos (v&iacute;rus, trojans, malware, worm, bot, backdoor, spyware, rootkit, ou de quaisquer outros que venham a ser criados), em decorr&ecirc;ncia da navega&ccedil;&atilde;o na Internet pelo usu&aacute;rio.</p>\r\n\r\n<p>Em hip&oacute;tese alguma, o servi&ccedil;o e seus colaboradores responsabilizam-se por eventuais danos diretos, indiretos, emergentes, especiais, imprevistos ou multas causadas, em qualquer mat&eacute;ria de responsabilidade, seja contratual, objetiva ou civil (inclusive neglig&ecirc;ncia ou outras), decorrentes de qualquer forma de uso do servi&ccedil;o, mesmo que advertida a possibilidade de tais danos.</p>\r\n\r\n<p>O usu&aacute;rio concorda que n&atilde;o usar&aacute; rob&ocirc;s, sistemas de varredura e armazenamento de dados (como &ldquo;spiders&rdquo; ou &ldquo;scrapers&rdquo;), links escondidos ou qualquer outro recurso escuso, ferramenta, programa, algoritmo ou m&eacute;todo coletor/extrator de dados autom&aacute;tico para acessar, adquirir, copiar ou monitorar o servi&ccedil;o, sem permiss&atilde;o expressa por escrito do &oacute;rg&atilde;o.</p>\r\n\r\n<p>Em se tratando de aplicativos em dispositivos m&oacute;veis sua comercializa&ccedil;&atilde;o &eacute; expressamente proibida. Ao concordar com este Termo de Uso e utilizar o aplicativo m&oacute;vel, o usu&aacute;rio receber&aacute; uma permiss&atilde;o do &oacute;rg&atilde;o para uso n&atilde;o comercial dos servi&ccedil;os oferecidos pelo aplicativo, o que, em nenhuma hip&oacute;tese, far&aacute; dele propriet&aacute;rio do aplicativo m&oacute;vel.</p>\r\n\r\n<p>Caso o usu&aacute;rio descumpra o Termo de Uso ou a Pol&iacute;tica de Privacidade, ou seja investigado em raz&atilde;o de m&aacute; conduta, este dever&aacute; responder legalmente por essa conduta.</p>\r\n\r\n<p>A Imprensa Nacional poder&aacute;, quanto &agrave;s ordens judiciais de pedido de informa&ccedil;&otilde;es, compartilhar informa&ccedil;&otilde;es necess&aacute;rias para investiga&ccedil;&otilde;es ou tomar medidas relacionadas a atividades ilegais, suspeitas de fraude ou amea&ccedil;as potenciais contra pessoas, bens ou sistemas que sustentam o servi&ccedil;o ou de outra forma necess&aacute;ria para cumprir com as obriga&ccedil;&otilde;es legais.</p>\r\n\r\n<p>A Imprensa Nacional se compromete a preservar a funcionalidade do servi&ccedil;o ou aplicativo, utilizando um layout que respeite a usabilidade e navegabilidade, facilitando a navega&ccedil;&atilde;o sempre que poss&iacute;vel, e exibir as funcionalidades de maneira completa, precisa e suficiente, de modo que as opera&ccedil;&otilde;es realizadas no servi&ccedil;o sejam claras.</p>\r\n\r\n<h4>8. Qual o contato pelo qual o usu&aacute;rio do servi&ccedil;o pode tirar suas d&uacute;vidas?</h4>\r\n\r\n<p>Caso o usu&aacute;rio tenha alguma d&uacute;vida sobre este Termo de Uso, ele poder&aacute; entrar em contato pelo e-mail&nbsp;<a href='mailto:caci@in.gov.br.>caci@in.gov.br.</a></p>",
                            TypeTerm = 1,
                            Version = 1
                        });
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ThreeAvaliation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Communication")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Deadline")
                        .HasColumnType("numeric");

                    b.Property<int>("NumberAvaliation")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProfessionalProfileId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quality")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("PK_TB_ThreeAvaliation");

                    b.HasIndex("ProfessionalProfileId");

                    b.ToTable("TB_ThreeAvaliation", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.Worker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsConcluded")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("ProfessionalAreaId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProfessionalProfileConcludedId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("PK_TB_Worker");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProfessionalAreaId");

                    b.HasIndex("ProfessionalProfileConcludedId");

                    b.ToTable("TB_Worker", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.WorkerDone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Avaliation")
                        .HasColumnType("numeric");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkerDoneProfessionalId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_TB_WorkerDone");

                    b.HasIndex("WorkerDoneProfessionalId");

                    b.ToTable("TB_WorkerDone", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.WorkerDoneProfessional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProfessionalProfileId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("PK_TB_WorkerDoneProfessional");

                    b.HasIndex("ProfessionalProfileId");

                    b.ToTable("TB_WorkerDoneProfessional", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.WorkerProfessional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsConcluded")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ProfessionalProfileId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Update")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WorkerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_TB_WorkerProfessional");

                    b.HasIndex("ProfessionalProfileId");

                    b.HasIndex("WorkerId");

                    b.ToTable("TB_WorkerProfessional", (string)null);
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Generics.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id")
                        .HasName("PK_TB_AspNetUsers");

                    b.HasIndex("ClientId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Generics.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Generics.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sistema.Bico.Domain.Generics.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Generics.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalClient", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.Client", "Client")
                        .WithMany("ProfessionalClient")
                        .HasForeignKey("ClientId");

                    b.HasOne("Sistema.Bico.Domain.Entities.ProfessionalProfile", "ProfessionalProfile")
                        .WithMany("ProfessionalClient")
                        .HasForeignKey("ProfessionalProfileId");

                    b.Navigation("Client");

                    b.Navigation("ProfessionalProfile");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalEspeciality", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.ProfessionalProfile", "ProfessionalProfile")
                        .WithMany("Especiality")
                        .HasForeignKey("IdProfessionalProfile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sistema.Bico.Domain.Entities.Worker", "Worker")
                        .WithMany("Especiality")
                        .HasForeignKey("IdWorker");

                    b.Navigation("ProfessionalProfile");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalPayment", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.ProfessionalProfile", "Professional")
                        .WithMany()
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalProfile", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Sistema.Bico.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sistema.Bico.Domain.Entities.ProfessionalArea", "ProfessionalArea")
                        .WithMany()
                        .HasForeignKey("ProfessionalAreaId");

                    b.Navigation("Address");

                    b.Navigation("Client");

                    b.Navigation("ProfessionalArea");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ThreeAvaliation", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.ProfessionalProfile", "ProfessionalProfile")
                        .WithMany()
                        .HasForeignKey("ProfessionalProfileId");

                    b.Navigation("ProfessionalProfile");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.Worker", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Sistema.Bico.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sistema.Bico.Domain.Entities.ProfessionalArea", "ProfessionalArea")
                        .WithMany()
                        .HasForeignKey("ProfessionalAreaId");

                    b.HasOne("Sistema.Bico.Domain.Entities.ProfessionalProfile", "ProfessionalProfileConcluded")
                        .WithMany()
                        .HasForeignKey("ProfessionalProfileConcludedId");

                    b.Navigation("Address");

                    b.Navigation("Client");

                    b.Navigation("ProfessionalArea");

                    b.Navigation("ProfessionalProfileConcluded");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.WorkerDone", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.WorkerDoneProfessional", "WorkerDoneProfessional")
                        .WithMany("WorkerDone")
                        .HasForeignKey("WorkerDoneProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkerDoneProfessional");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.WorkerDoneProfessional", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.ProfessionalProfile", "ProfessionalProfile")
                        .WithMany("WorkerDoneProfessional")
                        .HasForeignKey("ProfessionalProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfessionalProfile");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.WorkerProfessional", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.ProfessionalProfile", "ProfessionalProfile")
                        .WithMany("WorkerProfessional")
                        .HasForeignKey("ProfessionalProfileId");

                    b.HasOne("Sistema.Bico.Domain.Entities.Worker", "Worker")
                        .WithMany("WorkerProfessional")
                        .HasForeignKey("WorkerId");

                    b.Navigation("ProfessionalProfile");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Generics.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Sistema.Bico.Domain.Entities.Client", "Client")
                        .WithMany("ApplicationUser")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.Client", b =>
                {
                    b.Navigation("ApplicationUser");

                    b.Navigation("ProfessionalClient");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.ProfessionalProfile", b =>
                {
                    b.Navigation("Especiality");

                    b.Navigation("ProfessionalClient");

                    b.Navigation("WorkerDoneProfessional");

                    b.Navigation("WorkerProfessional");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.Worker", b =>
                {
                    b.Navigation("Especiality");

                    b.Navigation("WorkerProfessional");
                });

            modelBuilder.Entity("Sistema.Bico.Domain.Entities.WorkerDoneProfessional", b =>
                {
                    b.Navigation("WorkerDone");
                });
#pragma warning restore 612, 618
        }
    }
}
